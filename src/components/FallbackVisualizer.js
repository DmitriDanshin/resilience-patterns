import React, { useState, useEffect } from 'react';

const FallbackVisualizer = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
  const serviceStates = {
    PRIMARY: '–û—Å–Ω–æ–≤–Ω–æ–π',
    DEGRADED: '–î–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
    FALLBACK: '–ó–∞–ø–∞—Å–Ω–æ–π'
  };

  // –¢–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤
  const serviceTypes = {
    DATABASE: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
    CACHE: '–ö—ç—à',
    API: 'API',
    STORAGE: '–•—Ä–∞–Ω–∏–ª–∏—â–µ'
  };

  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const [currentState, setCurrentState] = useState(serviceStates.PRIMARY);
  const [serviceType, setServiceType] = useState(serviceTypes.DATABASE);
  const [primaryHealth, setPrimaryHealth] = useState(100);
  const [logs, setLogs] = useState([]);
  const [requestCount, setRequestCount] = useState(0);
  const [fallbackCount, setFallbackCount] = useState(0);
  const [successCount, setSuccessCount] = useState(0);
  const [failureCount, setFailureCount] = useState(0);
  const [isRecovering, setIsRecovering] = useState(false);
  const [recoveryProgress, setRecoveryProgress] = useState(0);
  const [autoFailureEnabled, setAutoFailureEnabled] = useState(false);
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Fallback
  const fallbackOptions = {
    [serviceTypes.DATABASE]: {
      primary: { name: '–û—Å–Ω–æ–≤–Ω–∞—è –ë–î', speed: 100, reliability: 99 },
      fallback: { name: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –ë–î', speed: 70, reliability: 95 },
      degraded: { name: '–†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è', speed: 90, reliability: 99 }
    },
    [serviceTypes.CACHE]: {
      primary: { name: 'Redis –∫–ª–∞—Å—Ç–µ—Ä', speed: 100, reliability: 98 },
      fallback: { name: '–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à', speed: 60, reliability: 100 },
      degraded: { name: '–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à', speed: 80, reliability: 97 }
    },
    [serviceTypes.API]: {
      primary: { name: '–û—Å–Ω–æ–≤–Ω–æ–µ API', speed: 100, reliability: 97 },
      fallback: { name: '–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ API', speed: 50, reliability: 99 },
      degraded: { name: 'API —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é', speed: 70, reliability: 98 }
    },
    [serviceTypes.STORAGE]: {
      primary: { name: '–û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ', speed: 100, reliability: 99.9 },
      fallback: { name: '–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ', speed: 75, reliability: 98 },
      degraded: { name: '–†–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞', speed: 85, reliability: 99.5 }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥
  const addLog = (message) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prevLogs => [`${timestamp}: ${message}`, ...prevLogs.slice(0, 9)]);
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
  const getCurrentConfig = () => {
    const options = fallbackOptions[serviceType];
    switch(currentState) {
      case serviceStates.PRIMARY: return options.primary;
      case serviceStates.DEGRADED: return options.degraded;
      case serviceStates.FALLBACK: return options.fallback;
      default: return options.primary;
    }
  };

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
  const executeRequest = () => {
    setRequestCount(prev => prev + 1);
    
    const config = getCurrentConfig();
    const isSuccessful = Math.random() * 100 < config.reliability;
    
    if (isSuccessful) {
      setSuccessCount(prev => prev + 1);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
      const baseTime = 100;
      const responseTime = Math.round(baseTime * (100 / config.speed));
      
      addLog(`‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ ${config.name} (${responseTime}–º—Å)`);
    } else {
      setFailureCount(prev => prev + 1);
      addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ ${config.name}`);
      
      if (currentState === serviceStates.PRIMARY) {
        // –°–Ω–∏–∂–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        const newHealth = Math.max(0, primaryHealth - 20);
        setPrimaryHealth(newHealth);
        
        if (newHealth < 40 && newHealth >= 20) {
          setCurrentState(serviceStates.DEGRADED);
          addLog(`‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${fallbackOptions[serviceType].degraded.name}`);
        } else if (newHealth < 20) {
          setCurrentState(serviceStates.FALLBACK);
          setFallbackCount(prev => prev + 1);
          addLog(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–∏—Å: ${fallbackOptions[serviceType].fallback.name}`);
        }
      }
    }
  };

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
  const recoverPrimaryService = () => {
    if (isRecovering) return;
    
    setIsRecovering(true);
    setRecoveryProgress(0);
    addLog(`üîÑ –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...`);
    
    const recoveryInterval = setInterval(() => {
      setRecoveryProgress(prev => {
        const newProgress = prev + 10;
        
        if (newProgress >= 100) {
          clearInterval(recoveryInterval);
          setPrimaryHealth(100);
          setCurrentState(serviceStates.PRIMARY);
          setIsRecovering(false);
          addLog(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
          return 100;
        }
        
        return newProgress;
      });
    }, 500);
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∑–∞–ø–∞—Å–Ω–æ–π —Ä–µ–∂–∏–º
  const forceFallback = () => {
    if (currentState !== serviceStates.FALLBACK) {
      setPrimaryHealth(0);
      setCurrentState(serviceStates.FALLBACK);
      setFallbackCount(prev => prev + 1);
      addLog(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–∏—Å: ${fallbackOptions[serviceType].fallback.name}`);
    }
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
  const forceDegraded = () => {
    if (currentState !== serviceStates.DEGRADED) {
      setPrimaryHealth(30);
      setCurrentState(serviceStates.DEGRADED);
      addLog(`‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${fallbackOptions[serviceType].degraded.name}`);
    }
  };

  // –°–±—Ä–æ—Å–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é
  const resetSimulation = () => {
    setCurrentState(serviceStates.PRIMARY);
    setPrimaryHealth(100);
    setRequestCount(0);
    setSuccessCount(0);
    setFailureCount(0);
    setFallbackCount(0);
    setIsRecovering(false);
    setRecoveryProgress(0);
    setAutoFailureEnabled(false);
    setLogs([]);
    addLog('üîÑ –°–∏–º—É–ª—è—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞');
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
  useEffect(() => {
    let damageInterval;
    
    if (autoFailureEnabled && currentState === serviceStates.PRIMARY && primaryHealth > 0) {
      damageInterval = setInterval(() => {
        setPrimaryHealth(prev => {
          const damage = Math.floor(Math.random() * 10) + 5;
          const newHealth = Math.max(0, prev - damage);
          
          if (prev > 30 && newHealth <= 30) {
            setCurrentState(serviceStates.DEGRADED);
            addLog(`‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${fallbackOptions[serviceType].degraded.name}`);
          } else if (prev > 10 && newHealth <= 10) {
            setCurrentState(serviceStates.FALLBACK);
            setFallbackCount(prev => prev + 1);
            addLog(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–∏—Å: ${fallbackOptions[serviceType].fallback.name}`);
          }
          
          return newHealth;
        });
      }, 3000);
    }
    
    return () => clearInterval(damageInterval);
  }, [autoFailureEnabled, currentState, primaryHealth, serviceType, fallbackOptions]);

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getStateColor = () => {
    switch(currentState) {
      case serviceStates.PRIMARY: return 'bg-green-500';
      case serviceStates.DEGRADED: return 'bg-yellow-500';
      case serviceStates.FALLBACK: return 'bg-blue-500';
      default: return 'bg-gray-500';
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getStateCardClass = (state) => {
    switch(state) {
      case serviceStates.PRIMARY:
        return currentState === state ? 'ring-4 ring-green-500 bg-green-100' : 'bg-gray-100';
      case serviceStates.DEGRADED:
        return currentState === state ? 'ring-4 ring-yellow-500 bg-yellow-100' : 'bg-gray-100';
      case serviceStates.FALLBACK:
        return currentState === state ? 'ring-4 ring-blue-500 bg-blue-100' : 'bg-gray-100';
      default:
        return 'bg-gray-100';
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-6 text-center">–°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Fallback</h1>
      
      {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–µ—Ä–≤–∏—Å–∞ */}
      <div className="mb-6">
        <label className="block mb-2 font-medium">–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞:</label>
        <div className="grid grid-cols-4 gap-2">
          {Object.values(serviceTypes).map(type => (
            <button
              key={type}
              className={`p-2 border rounded-lg transition ${serviceType === type ? 'bg-blue-100 border-blue-500' : 'hover:bg-gray-100'}`}
              onClick={() => {
                setServiceType(type);
                addLog(`üîß –¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${type}`);
              }}
            >
              {type}
            </button>
          ))}
        </div>
      </div>
      
      {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-4">
          <div className={`p-4 rounded-lg shadow w-1/3 mx-2 text-center ${getStateCardClass(serviceStates.PRIMARY)}`}>
            <h3 className="font-semibold">{serviceStates.PRIMARY}</h3>
            <p className="text-sm mt-1">{fallbackOptions[serviceType].primary.name}</p>
            <p className="text-xs mt-1">–°–∫–æ—Ä–æ—Å—Ç—å: 100%, –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {fallbackOptions[serviceType].primary.reliability}%</p>
          </div>
          <div className={`p-4 rounded-lg shadow w-1/3 mx-2 text-center ${getStateCardClass(serviceStates.DEGRADED)}`}>
            <h3 className="font-semibold">{serviceStates.DEGRADED}</h3>
            <p className="text-sm mt-1">{fallbackOptions[serviceType].degraded.name}</p>
            <p className="text-xs mt-1">–°–∫–æ—Ä–æ—Å—Ç—å: {fallbackOptions[serviceType].degraded.speed}%, –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {fallbackOptions[serviceType].degraded.reliability}%</p>
          </div>
          <div className={`p-4 rounded-lg shadow w-1/3 mx-2 text-center ${getStateCardClass(serviceStates.FALLBACK)}`}>
            <h3 className="font-semibold">{serviceStates.FALLBACK}</h3>
            <p className="text-sm mt-1">{fallbackOptions[serviceType].fallback.name}</p>
            <p className="text-xs mt-1">–°–∫–æ—Ä–æ—Å—Ç—å: {fallbackOptions[serviceType].fallback.speed}%, –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {fallbackOptions[serviceType].fallback.reliability}%</p>
          </div>
        </div>
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è */}
        <div className="mb-2">
          <div className="flex justify-between text-sm mb-1">
            <span>–ó–¥–æ—Ä–æ–≤—å–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:</span>
            <span>{primaryHealth}%</span>
          </div>
          <div className="bg-gray-200 h-4 rounded-full">
            <div 
              className={`h-4 rounded-full transition-all ${
                primaryHealth > 60 ? 'bg-green-500' : 
                primaryHealth > 30 ? 'bg-yellow-500' : 'bg-red-500'
              }`} 
              style={{ width: `${primaryHealth}%` }}
            ></div>
          </div>
        </div>
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è */}
        {isRecovering && (
          <div className="mt-2">
            <div className="flex justify-between text-sm mb-1">
              <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</span>
              <span>{recoveryProgress}%</span>
            </div>
            <div className="bg-gray-200 h-3 rounded-full">
              <div 
                className="bg-blue-500 h-3 rounded-full transition-all" 
                style={{ width: `${recoveryProgress}%` }}
              ></div>
            </div>
          </div>
        )}
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex flex-wrap justify-center gap-3 mb-6">
        <button 
          onClick={executeRequest} 
          className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition"
        >
          –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        </button>
        <button 
          onClick={forceDegraded} 
          className="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 transition"
          disabled={currentState === serviceStates.DEGRADED}
        >
          –ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        </button>
        <button 
          onClick={forceFallback} 
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
          disabled={currentState === serviceStates.FALLBACK}
        >
          –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–∏—Å
        </button>
        <button 
          onClick={recoverPrimaryService} 
          className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 transition"
          disabled={currentState === serviceStates.PRIMARY || isRecovering}
        >
          –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
        </button>
        <button 
          onClick={resetSimulation}
          className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition"
        >
          –°–±—Ä–æ—Å–∏—Ç—å
        </button>
      </div>
      
      <div className="mb-4 flex items-center">
        <input 
          type="checkbox" 
          id="autoFailure" 
          checked={autoFailureEnabled} 
          onChange={() => setAutoFailureEnabled(!autoFailureEnabled)} 
          className="mr-2"
        />
        <label htmlFor="autoFailure" className="text-sm">
          –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
        </label>
      </div>
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏ */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="p-4 bg-gray-100 rounded-lg">
          <h3 className="font-semibold mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
          <p>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: <span className="font-medium">{currentState}</span></p>
          <p>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <span className="font-medium">{requestCount}</span></p>
          <p>–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <span className="font-medium text-green-600">{successCount}</span></p>
          <p>–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <span className="font-medium text-red-600">{failureCount}</span></p>
          <p>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π —Å–µ—Ä–≤–∏—Å: <span className="font-medium text-blue-600">{fallbackCount}</span></p>
          <p>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <span className="font-medium">{requestCount > 0 ? Math.round((successCount / requestCount) * 100) : 0}%</span></p>
        </div>
        
        {/* –õ–æ–≥–∏ */}
        <div className="p-4 bg-gray-100 rounded-lg">
          <h3 className="font-semibold mb-2">–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π:</h3>
          <div className="h-40 overflow-y-auto text-sm space-y-1">
            {logs.map((log, index) => (
              <p key={index}>{log}</p>
            ))}
          </div>
        </div>
      </div>
      
      {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Fallback */}
      <div className="mt-6 bg-blue-50 p-4 rounded-lg text-sm">
        <h3 className="font-semibold mb-2">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Fallback:</h3>
        <p><strong>Fallback</strong> - —ç—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–∏ —Å–±–æ—è—Ö.</p>
        <p className="mt-2"><strong>–¢—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:</strong></p>
        <ul className="list-disc pl-5 mt-1 space-y-1">
          <li><strong>–û—Å–Ω–æ–≤–Ω–æ–π</strong> —Ä–µ–∂–∏–º (Normal) - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é</li>
          <li><strong>–î–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</strong> —Ä–µ–∂–∏–º (Degraded) - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é</li>
          <li><strong>–ó–∞–ø–∞—Å–Ω–æ–π</strong> —Ä–µ–∂–∏–º (Fallback) - —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–ª–∏ —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
        </ul>
        <p className="mt-2"><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤.</p>
      </div>
    </div>
  );
};

export default FallbackVisualizer;