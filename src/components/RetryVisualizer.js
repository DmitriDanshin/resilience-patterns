import React, { useState, useEffect, useRef } from 'react';
import { uniqueNamesGenerator, adjectives, colors, names } from 'unique-names-generator';

const RetryVisualizer = () => {
  
  const requestStates = {
    IDLE: '–û–∂–∏–¥–∞–Ω–∏–µ',
    IN_PROGRESS: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
    SUCCESS: '–£—Å–ø–µ—à–Ω–æ',
    FAILED: '–°–±–æ–π',
    RETRYING: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞',
    EXHAUSTED: '–ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã'
  };

  // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  const retryStrategies = {
    FIXED: '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª',
    EXPONENTIAL: '–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞',
    EXPONENTIAL_JITTER: '–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º',
    RANDOM: '–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞'
  };

  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const [requestState, setRequestState] = useState(requestStates.IDLE);
  const [logs, setLogs] = useState([]);
  const [activeRequests, setActiveRequests] = useState([]);
  const [totalSuccess, setTotalSuccess] = useState(0);
  const [totalFailure, setTotalFailure] = useState(0);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Retry
  const [maxRetries, setMaxRetries] = useState(3);
  const [baseDelay, setBaseDelay] = useState(2);
  const [retryStrategy, setRetryStrategy] = useState(retryStrategies.FIXED);
  const [successProbability, setSuccessProbability] = useState(50);
  
  // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏
  const timerRefs = useRef([]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥
  const addLog = (message) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prevLogs => [`${timestamp}: ${message}`, ...prevLogs.slice(0, 9)]);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  const calculateDelay = (attempt, strategy) => {
    switch(strategy) {
      case retryStrategies.FIXED:
        return baseDelay;
      case retryStrategies.EXPONENTIAL:
        return baseDelay * Math.pow(2, attempt - 1);
      case retryStrategies.EXPONENTIAL_JITTER: {
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º (—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å)
        const expDelay = baseDelay * Math.pow(2, attempt - 1);
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 50% –æ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        const jitter = Math.random() * (expDelay * 0.5);
        return expDelay + jitter;
      }
      case retryStrategies.RANDOM:
        return baseDelay + Math.random() * baseDelay * 2; // –æ—Ç baseDelay –¥–æ 3*baseDelay
      default:
        return baseDelay;
    }
  };

  // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å —É—Å–ø–µ—Ö–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
  const attemptRequest = (requestId, currentAttempt = 1, isRetry = false) => {
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    setActiveRequests(prevRequests => 
      prevRequests.map(req => {
        if (req.id === requestId) {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
          return { 
            ...req, 
            currentAttempt, 
            status: isRetry ? requestStates.RETRYING : requestStates.IN_PROGRESS, 
            isProcessing: true,
            processingTimeRemaining: 2 // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
          };
        }
        return req;
      })
    );

    const logPrefix = isRetry ? `üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${currentAttempt}/${maxRetries}` : 'üöÄ –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞';
    addLog(`${logPrefix} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId}`);

    // –¢–∞–π–º–µ—Ä –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    const processingTimer = setInterval(() => {
      setActiveRequests(prevRequests => {
        const updatedRequests = prevRequests.map(req => {
          if (req.id === requestId && req.isProcessing) {
            const newTimeRemaining = req.processingTimeRemaining - 1;
            
            // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (newTimeRemaining <= 0) {
              clearInterval(processingTimer);
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
              const isSuccess = Math.random() * 100 < successProbability;
              
              if (isSuccess) {
                addLog(`‚úÖ –ó–∞–ø—Ä–æ—Å ${requestId} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ${currentAttempt})`);
                setTotalSuccess(prev => prev + 1);
                return { 
                  ...req, 
                  isProcessing: false, 
                  status: requestStates.SUCCESS,
                  processingTimeRemaining: 0
                };
              } else {
                // –ù–µ—É–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                addLog(`‚ùå –°–±–æ–π –∑–∞–ø—Ä–æ—Å–∞ ${requestId} (–ø–æ–ø—ã—Ç–∫–∞ ${currentAttempt})`);
                
                if (currentAttempt < maxRetries) {
                  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                  const delay = calculateDelay(currentAttempt, retryStrategy);
                  addLog(`‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ ${delay.toFixed(1)}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
                  
                  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                  const retryTimer = setTimeout(() => {
                    attemptRequest(requestId, currentAttempt + 1, true);
                  }, delay * 1000);
                  
                  timerRefs.current.push(retryTimer);
                  
                  return { 
                    ...req, 
                    isProcessing: false, 
                    status: requestStates.FAILED,
                    retryCountdown: delay,
                    processingTimeRemaining: 0
                  };
                } else {
                  // –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏
                  addLog(`üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId} –∏—Å—á–µ—Ä–ø–∞–Ω—ã`);
                  setTotalFailure(prev => prev + 1);
                  return { 
                    ...req, 
                    isProcessing: false, 
                    status: requestStates.EXHAUSTED,
                    processingTimeRemaining: 0
                  };
                }
              }
            }
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            return { ...req, processingTimeRemaining: newTimeRemaining };
          }
          return req;
        });
        
        return updatedRequests;
      });
    }, 1000);
    
    timerRefs.current.push(processingTimer);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  useEffect(() => {
    const countdownTimer = setInterval(() => {
      setActiveRequests(prevRequests => 
        prevRequests.map(req => {
          if (req.retryCountdown && req.retryCountdown > 0) {
            return {
              ...req,
              retryCountdown: +(req.retryCountdown - 0.1).toFixed(1)
            };
          }
          return req;
        })
      );
    }, 100);
    
    timerRefs.current.push(countdownTimer);
    return () => clearInterval(countdownTimer);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const createRequest = () => {
    const requestId = uniqueNamesGenerator({ dictionaries: [adjectives, colors, names] }).toLowerCase();
    const newRequest = {
      id: requestId,
      startTime: Date.now(),
      status: requestStates.IDLE,
      currentAttempt: 0,
      maxRetries: maxRetries,
      retryStrategy: retryStrategy,
      isProcessing: false
    };
    
    setActiveRequests(prev => [...prev, newRequest]);
    attemptRequest(requestId);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const clearCompletedRequests = () => {
    setActiveRequests(prevRequests => 
      prevRequests.filter(req => {
        // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–µ–∫—É–Ω–¥)
        const isActive = req.status === requestStates.IN_PROGRESS || 
                        req.status === requestStates.RETRYING || 
                        req.retryCountdown > 0;
        const isRecent = (Date.now() - req.startTime) < 30000; // 30 —Å–µ–∫—É–Ω–¥
        return isActive || isRecent;
      })
    );
  };

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  useEffect(() => {
    const cleanupInterval = setInterval(clearCompletedRequests, 15000);
    return () => clearInterval(cleanupInterval);
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      timerRefs.current.forEach(timer => clearTimeout(timer));
    };
  }, []);

  // –°–±—Ä–æ—Å–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é
  const resetSimulation = () => {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    timerRefs.current.forEach(timer => clearTimeout(timer));
    timerRefs.current = [];
    
    setActiveRequests([]);
    setLogs([]);
    setTotalSuccess(0);
    setTotalFailure(0);
    addLog('üîÑ –°–∏–º—É–ª—è—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞');
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const getStatusColor = (status) => {
    switch(status) {
      case requestStates.IN_PROGRESS:
      case requestStates.RETRYING:
        return 'bg-blue-500';
      case requestStates.SUCCESS:
        return 'bg-green-500';
      case requestStates.FAILED:
        return 'bg-yellow-500';
      case requestStates.EXHAUSTED:
        return 'bg-red-500';
      default:
        return 'bg-gray-300';
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusTextColor = (status) => {
    switch(status) {
      case requestStates.IN_PROGRESS:
      case requestStates.RETRYING:
        return 'text-blue-600';
      case requestStates.SUCCESS:
        return 'text-green-600';
      case requestStates.FAILED:
        return 'text-yellow-600';
      case requestStates.EXHAUSTED:
        return 'text-red-600';
      default:
        return 'text-gray-600';
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-6 text-center">–°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Retry</h1>
      
      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Retry */}
      <div className="mb-6 bg-gray-100 p-4 rounded-lg grid grid-cols-2 gap-4">
        <div>
          <label className="block mb-2 text-sm font-medium">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫:</label>
          <input 
            type="range" 
            min="1" 
            max="5" 
            value={maxRetries} 
            onChange={(e) => setMaxRetries(parseInt(e.target.value))}
            className="w-full h-2 bg-blue-200 rounded-lg appearance-none cursor-pointer"
          />
          <div className="flex justify-between text-xs text-gray-600">
            <span>1</span>
            <span>{maxRetries}</span>
            <span>5</span>
          </div>
        </div>
        
        <div>
          <label className="block mb-2 text-sm font-medium">–ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫—É–Ω–¥):</label>
          <input 
            type="range" 
            min="1" 
            max="5" 
            value={baseDelay} 
            onChange={(e) => setBaseDelay(parseInt(e.target.value))}
            className="w-full h-2 bg-green-200 rounded-lg appearance-none cursor-pointer"
          />
          <div className="flex justify-between text-xs text-gray-600">
            <span>1—Å</span>
            <span>{baseDelay}—Å</span>
            <span>5—Å</span>
          </div>
        </div>
        
        <div>
          <label className="block mb-2 text-sm font-medium">–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫:</label>
          <select 
            value={retryStrategy} 
            onChange={(e) => setRetryStrategy(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded text-sm"
          >
            {Object.entries(retryStrategies).map(([key, value]) => (
              <option key={key} value={value}>{value}</option>
            ))}
          </select>
        </div>
        
        <div>
          <label className="block mb-2 text-sm font-medium">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ (%):</label>
          <input 
            type="range" 
            min="10" 
            max="90" 
            value={successProbability} 
            onChange={(e) => setSuccessProbability(parseInt(e.target.value))}
            className="w-full h-2 bg-yellow-200 rounded-lg appearance-none cursor-pointer"
          />
          <div className="flex justify-between text-xs text-gray-600">
            <span>10%</span>
            <span>{successProbability}%</span>
            <span>90%</span>
          </div>
        </div>
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex justify-center space-x-4 mb-6">
        <button 
          onClick={createRequest} 
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        </button>
        <button 
          onClick={resetSimulation}
          className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition"
        >
          –°–±—Ä–æ—Å–∏—Ç—å
        </button>
      </div>
      
      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã */}
      <div className="mb-6">
        <h3 className="font-semibold mb-3">–ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</h3>
        {activeRequests.length === 0 ? (
          <p className="text-center text-gray-500 my-4">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</p>
        ) : (
          <div className="space-y-4">
            {activeRequests.map(request => (
              <div key={request.id} className="border rounded-lg p-3 bg-gray-50">
                <div className="flex justify-between mb-2">
                  <div>
                    <span className="font-medium">–ó–∞–ø—Ä–æ—Å #{request.id.toString().slice(-4)}</span>
                    <span className={`ml-2 font-semibold ${getStatusTextColor(request.status)}`}>
                      {request.status}
                    </span>
                  </div>
                </div>
                
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ø—ã—Ç–æ–∫ */}
                <div className="mb-1">
                  <div className="flex justify-between text-xs mb-1">
                    <span>–ü–æ–ø—ã—Ç–∫–∏:</span>
                    <span>{request.currentAttempt}/{maxRetries + 1}</span>
                  </div>
                  <div className="bg-gray-200 h-2 rounded-full">
                    <div 
                      className={`${getStatusColor(request.status)} h-2 rounded-full transition-all duration-300`} 
                      style={{ width: `${(request.currentAttempt / (maxRetries + 1)) * 100}%` }}
                    ></div>
                  </div>
                </div>
                
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ */}
                {request.isProcessing && (
                  <div className="mt-2">
                    <div className="flex justify-between text-xs mb-1">
                      <span>–û–±—Ä–∞–±–æ—Ç–∫–∞:</span>
                      <span>{2 - request.processingTimeRemaining}—Å / 2—Å</span>
                    </div>
                    <div className="bg-gray-200 h-2 rounded-full">
                      <div 
                        className="bg-blue-400 h-2 rounded-full transition-all duration-1000" 
                        style={{ width: `${((2 - request.processingTimeRemaining) / 2) * 100}%` }}
                      ></div>
                    </div>
                  </div>
                )}
                
                {/* –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ */}
                {request.retryCountdown > 0 && (
                  <div className="mt-2">
                    <div className="flex justify-between text-xs mb-1">
                      <span>–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏:</span>
                      <span>{request.retryCountdown.toFixed(1)}—Å</span>
                    </div>
                    <div className="bg-gray-200 h-2 rounded-full">
                      <div 
                        className="bg-yellow-400 h-2 rounded-full transition-all duration-100" 
                        style={{ width: `${(1 - (request.retryCountdown / calculateDelay(request.currentAttempt, request.retryStrategy))) * 100}%` }}
                      ></div>
                    </div>
                  </div>
                )}
                
                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
                {(request.status === requestStates.SUCCESS || request.status === requestStates.EXHAUSTED) && (
                  <div className="mt-2 text-sm">
                    <span className={`font-medium ${request.status === requestStates.SUCCESS ? 'text-green-600' : 'text-red-600'}`}>
                      {request.status === requestStates.SUCCESS 
                        ? `‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å ${request.currentAttempt} –ø–æ–ø—ã—Ç–∫–∏` 
                        : `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ ${maxRetries + 1} –ø–æ–ø—ã—Ç–æ–∫`}
                    </span>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏ */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="p-4 bg-gray-100 rounded-lg">
          <h3 className="font-semibold mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
          <p>–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <span className="font-medium text-green-600">{totalSuccess}</span></p>
          <p>–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <span className="font-medium text-red-600">{totalFailure}</span></p>
          <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <span className="font-medium">{activeRequests.filter(r => r.status !== requestStates.SUCCESS && r.status !== requestStates.EXHAUSTED).length}</span></p>
          
          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ */}
          <div className="mt-3 text-sm bg-white p-2 rounded">
            <p className="font-medium">–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {retryStrategy}</p>
                          <p className="text-xs text-gray-600 mt-1">
              {retryStrategy === retryStrategies.FIXED 
                ? `–í—Å–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ ${baseDelay} —Å–µ–∫—É–Ω–¥`
                : retryStrategy === retryStrategies.EXPONENTIAL
                  ? `–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: ${[...Array(maxRetries)].map((_, i) => (baseDelay * Math.pow(2, i)).toFixed(1)).join(', ')} —Å–µ–∫—É–Ω–¥`
                  : retryStrategy === retryStrategies.EXPONENTIAL_JITTER
                    ? `–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (${[...Array(maxRetries)].map((_, i) => (baseDelay * Math.pow(2, i)).toFixed(1)).join(', ')} —Å) + —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ 50%`
                    : `–°–ª—É—á–∞–π–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ—Ç ${baseDelay} –¥–æ ${(baseDelay * 3).toFixed(1)} —Å–µ–∫—É–Ω–¥`
              }
            </p>
          </div>
        </div>
        
        {/* –õ–æ–≥–∏ */}
        <div className="p-4 bg-gray-100 rounded-lg">
          <h3 className="font-semibold mb-2">–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π:</h3>
          <div className="h-40 overflow-y-auto text-sm space-y-1">
            {logs.map((log, index) => (
              <p key={index}>{log}</p>
            ))}
          </div>
        </div>
      </div>
      
      {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Retry */}
      <div className="mt-6 bg-blue-50 p-4 rounded-lg text-sm">
        <h3 className="font-semibold mb-2">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Retry:</h3>
        <p><strong>Retry</strong> - –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É.</p>
        <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</strong></p>
        <ul className="list-disc pl-5 mt-2 space-y-1">
          <li><strong>–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª</strong> - –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏</li>
          <li><strong>–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞</strong> - –∫–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–π—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª (–±–∞–∑–æ–≤–∞—è_–∑–∞–¥–µ—Ä–∂–∫–∞ * 2<sup>–ø–æ–ø—ã—Ç–∫–∞</sup>)</li>
          <li><strong>–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º</strong> - —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–ª—é—Å —Å–ª—É—á–∞–π–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫</li>
          <li><strong>–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞</strong> - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–≥—Ä–æ–º–∫–æ–≥–æ —Ö–æ—Ä–∞" –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤</li>
        </ul>
        <p className="mt-2"><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–±–æ—è–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—É—á–Ω—ã—Ö –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤.</p>
        <p className="mt-2"><strong>–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</strong> —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –º–∞—Å—Å–æ–≤—ã—Ö —Å–±–æ—è—Ö, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑-–∑–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.</p>
        <p className="mt-2"><strong>Best Practice:</strong> –í —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–æ—á–µ—Ç–∞–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É) —Å–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–∫–æ–ø–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è).</p>
      </div>
    </div>
  );
};

export default RetryVisualizer;