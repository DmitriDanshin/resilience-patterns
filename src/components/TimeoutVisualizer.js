import React, { useState, useEffect, useRef } from 'react';

const TimeoutVisualizer = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const requestStates = {
    IDLE: '–û–∂–∏–¥–∞–Ω–∏–µ',
    IN_PROGRESS: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
    COMPLETED: '–ó–∞–≤–µ—Ä—à–µ–Ω',
    TIMEOUT: '–¢–∞–π–º–∞—É—Ç',
    CANCELLED: '–û—Ç–º–µ–Ω–µ–Ω'
  };

  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const [requestState, setRequestState] = useState(requestStates.IDLE);
  const [logs, setLogs] = useState([]);
  const [activeRequests, setActiveRequests] = useState([]);
  const [totalTimeouts, setTotalTimeouts] = useState(0);
  const [totalSuccess, setTotalSuccess] = useState(0);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
  const [timeoutDuration, setTimeoutDuration] = useState(5);
  const [requestDuration, setRequestDuration] = useState(3);
  
  // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏
  const timerRefs = useRef([]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥
  const addLog = (message) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prevLogs => [`${timestamp}: ${message}`, ...prevLogs.slice(0, 9)]);
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const createRequest = () => {
    const requestId = Date.now();
    const newRequest = {
      id: requestId,
      startTime: Date.now(),
      status: requestStates.IN_PROGRESS,
      timeRemaining: timeoutDuration,
      processingTime: requestDuration,
      processingRemaining: requestDuration
    };
    
    setActiveRequests(prev => [...prev, newRequest]);
    addLog(`üöÄ –ó–∞–ø—Ä–æ—Å ${requestId} –Ω–∞—á–∞—Ç (–¢–∞–π–º–∞—É—Ç: ${timeoutDuration}—Å, –û–±—Ä–∞–±–æ—Ç–∫–∞: ${requestDuration}—Å)`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
    const timeoutTimer = setInterval(() => {
      setActiveRequests(prevRequests => 
        prevRequests.map(req => {
          if (req.id === requestId) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–∞–π–º–∞—É—Ç–∞
            const newTimeRemaining = req.timeRemaining - 1;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–∞–π–º–∞—É—Ç
            if (newTimeRemaining <= 0 && req.status === requestStates.IN_PROGRESS) {
              clearInterval(timeoutTimer);
              clearInterval(processingTimer);
              addLog(`‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ ${requestId}`);
              setTotalTimeouts(prev => prev + 1);
              return { ...req, timeRemaining: 0, status: requestStates.TIMEOUT };
            }
            
            return { ...req, timeRemaining: newTimeRemaining };
          }
          return req;
        })
      );
    }, 1000);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const processingTimer = setInterval(() => {
      setActiveRequests(prevRequests => 
        prevRequests.map(req => {
          if (req.id === requestId && req.status === requestStates.IN_PROGRESS) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
            const newProcessingRemaining = req.processingRemaining - 1;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if (newProcessingRemaining <= 0) {
              clearInterval(timeoutTimer);
              clearInterval(processingTimer);
              addLog(`‚úÖ –ó–∞–ø—Ä–æ—Å ${requestId} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω`);
              setTotalSuccess(prev => prev + 1);
              return { ...req, processingRemaining: 0, status: requestStates.COMPLETED };
            }
            
            return { ...req, processingRemaining: newProcessingRemaining };
          }
          return req;
        })
      );
    }, 1000);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    timerRefs.current.push(timeoutTimer, processingTimer);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
  const cancelRequest = (requestId) => {
    setActiveRequests(prevRequests => 
      prevRequests.map(req => {
        if (req.id === requestId && req.status === requestStates.IN_PROGRESS) {
          addLog(`üõë –ó–∞–ø—Ä–æ—Å ${requestId} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`);
          return { ...req, status: requestStates.CANCELLED };
        }
        return req;
      })
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const clearCompletedRequests = () => {
    setActiveRequests(prevRequests => 
      prevRequests.filter(req => 
        req.status === requestStates.IN_PROGRESS || 
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–µ–∫—É–Ω–¥)
        (Date.now() - req.startTime < 10000)
      )
    );
  };

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  useEffect(() => {
    const cleanupInterval = setInterval(clearCompletedRequests, 10000);
    return () => clearInterval(cleanupInterval);
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      timerRefs.current.forEach(timer => clearInterval(timer));
    };
  }, []);

  // –°–±—Ä–æ—Å–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é
  const resetSimulation = () => {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    timerRefs.current.forEach(timer => clearInterval(timer));
    timerRefs.current = [];
    
    setActiveRequests([]);
    setLogs([]);
    setTotalTimeouts(0);
    setTotalSuccess(0);
    addLog('üîÑ –°–∏–º—É–ª—è—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞');
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const getStatusColor = (status) => {
    switch(status) {
      case requestStates.IN_PROGRESS: return 'bg-blue-500';
      case requestStates.COMPLETED: return 'bg-green-500';
      case requestStates.TIMEOUT: return 'bg-red-500';
      case requestStates.CANCELLED: return 'bg-gray-500';
      default: return 'bg-gray-300';
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusTextColor = (status) => {
    switch(status) {
      case requestStates.IN_PROGRESS: return 'text-blue-600';
      case requestStates.COMPLETED: return 'text-green-600';
      case requestStates.TIMEOUT: return 'text-red-600';
      case requestStates.CANCELLED: return 'text-gray-600';
      default: return 'text-gray-600';
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-6 text-center">–°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Timeout</h1>
      
      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ */}
      <div className="mb-6 bg-gray-100 p-4 rounded-lg grid grid-cols-2 gap-4">
        <div>
          <label className="block mb-2 text-sm font-medium">–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (—Å–µ–∫—É–Ω–¥):</label>
          <input 
            type="range" 
            min="1" 
            max="15" 
            value={timeoutDuration} 
            onChange={(e) => setTimeoutDuration(parseInt(e.target.value))}
            className="w-full h-2 bg-blue-200 rounded-lg appearance-none cursor-pointer"
          />
          <div className="flex justify-between text-xs text-gray-600">
            <span>1—Å</span>
            <span>{timeoutDuration}—Å</span>
            <span>15—Å</span>
          </div>
        </div>
        
        <div>
          <label className="block mb-2 text-sm font-medium">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–µ–∫—É–Ω–¥):</label>
          <input 
            type="range" 
            min="1" 
            max="10" 
            value={requestDuration} 
            onChange={(e) => setRequestDuration(parseInt(e.target.value))}
            className="w-full h-2 bg-green-200 rounded-lg appearance-none cursor-pointer"
          />
          <div className="flex justify-between text-xs text-gray-600">
            <span>1—Å</span>
            <span>{requestDuration}—Å</span>
            <span>10—Å</span>
          </div>
        </div>
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex justify-center space-x-4 mb-6">
        <button 
          onClick={createRequest} 
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        </button>
        <button 
          onClick={resetSimulation}
          className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition"
        >
          –°–±—Ä–æ—Å–∏—Ç—å
        </button>
      </div>
      
      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã */}
      <div className="mb-6">
        <h3 className="font-semibold mb-3">–ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</h3>
        {activeRequests.length === 0 ? (
          <p className="text-center text-gray-500 my-4">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</p>
        ) : (
          <div className="space-y-4">
            {activeRequests.map(request => (
              <div key={request.id} className="border rounded-lg p-3 bg-gray-50">
                <div className="flex justify-between mb-2">
                  <div>
                    <span className="font-medium">–ó–∞–ø—Ä–æ—Å #{request.id.toString().slice(-4)}</span>
                    <span className={`ml-2 font-semibold ${getStatusTextColor(request.status)}`}>
                      {request.status}
                    </span>
                  </div>
                  {request.status === requestStates.IN_PROGRESS && (
                    <button 
                      onClick={() => cancelRequest(request.id)}
                      className="px-2 py-1 bg-gray-200 text-xs rounded hover:bg-gray-300"
                    >
                      –û—Ç–º–µ–Ω–∏—Ç—å
                    </button>
                  )}
                </div>
                
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–∞–π–º–∞—É—Ç–∞ */}
                <div className="mb-1">
                  <div className="flex justify-between text-xs mb-1">
                    <span>–¢–∞–π–º–∞—É—Ç:</span>
                    <span>{request.timeRemaining}—Å / {timeoutDuration}—Å</span>
                  </div>
                  <div className="bg-gray-200 h-2 rounded-full">
                    <div 
                      className="bg-red-400 h-2 rounded-full transition-all duration-1000" 
                      style={{ width: `${((timeoutDuration - request.timeRemaining) / timeoutDuration) * 100}%` }}
                    ></div>
                  </div>
                </div>
                
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ */}
                <div>
                  <div className="flex justify-between text-xs mb-1">
                    <span>–û–±—Ä–∞–±–æ—Ç–∫–∞:</span>
                    <span>{requestDuration - request.processingRemaining}—Å / {requestDuration}—Å</span>
                  </div>
                  <div className="bg-gray-200 h-2 rounded-full">
                    <div 
                      className="bg-green-400 h-2 rounded-full transition-all duration-1000" 
                      style={{ width: `${((requestDuration - request.processingRemaining) / requestDuration) * 100}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏ */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="p-4 bg-gray-100 rounded-lg">
          <h3 className="font-semibold mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
          <p>–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <span className="font-medium text-green-600">{totalSuccess}</span></p>
          <p>–¢–∞–π–º–∞—É—Ç–æ–≤: <span className="font-medium text-red-600">{totalTimeouts}</span></p>
          <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <span className="font-medium">{activeRequests.filter(r => r.status === requestStates.IN_PROGRESS).length}</span></p>
        </div>
        
        {/* –õ–æ–≥–∏ */}
        <div className="p-4 bg-gray-100 rounded-lg">
          <h3 className="font-semibold mb-2">–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π:</h3>
          <div className="h-40 overflow-y-auto text-sm space-y-1">
            {logs.map((log, index) => (
              <p key={index}>{log}</p>
            ))}
          </div>
        </div>
      </div>
      
      {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Timeout */}
      <div className="mt-6 bg-blue-50 p-4 rounded-lg text-sm">
        <h3 className="font-semibold mb-2">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Timeout:</h3>
        <p><strong>–¢–∞–π–º–∞—É—Ç</strong> - –º–µ—Ö–∞–Ω–∏–∑–º –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ–ª—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.</p>
        <p><strong>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</strong></p>
        <ul className="list-disc pl-5 mt-2 space-y-1">
          <li>–¢–∞–π–º–µ—Ä —Ç–∞–π–º–∞—É—Ç–∞ - –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞</li>
          <li>–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –æ–ø–µ—Ä–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è</li>
          <li>–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ - –ª–æ–≥–∏–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏</li>
        </ul>
        <p className="mt-2"><strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong> –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏–∑-–∑–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞, –∑–∞—â–∏—Ç–∞ –æ—Ç —É—Ç–µ—á–µ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤.</p>
      </div>
    </div>
  );
};

export default TimeoutVisualizer;