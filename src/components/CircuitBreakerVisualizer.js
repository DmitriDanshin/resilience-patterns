import React, { useState, useEffect } from 'react';

const CircuitBreakerVisualizer = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker
  const states = {
    CLOSED: '–ó–∞–∫—Ä—ã—Ç—ã–π',
    OPEN: '–û—Ç–∫—Ä—ã—Ç—ã–π',
    HALF_OPEN: '–ü–æ–ª—É–æ—Ç–∫—Ä—ã—Ç—ã–π'
  };

  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const [currentState, setCurrentState] = useState(states.CLOSED);
  const [failureCount, setFailureCount] = useState(0);
  const [successCount, setSuccessCount] = useState(0);
  const [logs, setLogs] = useState([]);
  const [isTimerActive, setIsTimerActive] = useState(false);
  const [timeRemaining, setTimeRemaining] = useState(0);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Circuit Breaker
  const failureThreshold = 5;
  const resetTimeoutSeconds = 10;
  const maxTestRequests = 3;
  const [testRequestsRemaining, setTestRequestsRemaining] = useState(maxTestRequests);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥
  const addLog = (message) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prevLogs => [`${timestamp}: ${message}`, ...prevLogs.slice(0, 9)]);
  };

  // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const simulateSuccess = () => {
    if (currentState === states.CLOSED) {
      setSuccessCount(prevCount => prevCount + 1);
      addLog('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    } else if (currentState === states.HALF_OPEN && testRequestsRemaining > 0) {
      setSuccessCount(prevCount => prevCount + 1);
      setTestRequestsRemaining(prev => prev - 1);
      addLog(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (–æ—Å—Ç–∞–ª–æ—Å—å ${testRequestsRemaining - 1})`);
      
      // –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (testRequestsRemaining === 1) {
        setCurrentState(states.CLOSED);
        setFailureCount(0);
        addLog('üîÑ Circuit Breaker –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –ó–ê–ö–†–´–¢–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      }
    } else if (currentState === states.OPEN) {
      addLog('‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω (Circuit Breaker –û–¢–ö–†–´–¢)');
    }
  };

  // –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const simulateFailure = () => {
    if (currentState === states.CLOSED) {
      const newFailureCount = failureCount + 1;
      setFailureCount(newFailureCount);
      addLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (${newFailureCount}/${failureThreshold})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫
      if (newFailureCount >= failureThreshold) {
        setCurrentState(states.OPEN);
        setIsTimerActive(true);
        setTimeRemaining(resetTimeoutSeconds);
        addLog(`üîÑ Circuit Breaker –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –û–¢–ö–†–´–¢–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ ${resetTimeoutSeconds} —Å–µ–∫—É–Ω–¥`);
      }
    } else if (currentState === states.HALF_OPEN && testRequestsRemaining > 0) {
      setTestRequestsRemaining(prev => prev - 1);
      addLog(`‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω (–æ—Å—Ç–∞–ª–æ—Å—å ${testRequestsRemaining - 1})`);
      
      // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setCurrentState(states.OPEN);
      setIsTimerActive(true);
      setTimeRemaining(resetTimeoutSeconds);
      addLog(`üîÑ Circuit Breaker –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –û–¢–ö–†–´–¢–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ ${resetTimeoutSeconds} —Å–µ–∫—É–Ω–¥`);
    } else if (currentState === states.OPEN) {
      addLog('‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω (Circuit Breaker –û–¢–ö–†–´–¢)');
    }
  };

  // –°–±—Ä–æ—Å–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é
  const resetSimulation = () => {
    setCurrentState(states.CLOSED);
    setFailureCount(0);
    setSuccessCount(0);
    setIsTimerActive(false);
    setTimeRemaining(0);
    setTestRequestsRemaining(maxTestRequests);
    setLogs([]);
    addLog('üîÑ –°–∏–º—É–ª—è—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞');
  };

  // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    let timer;
    
    if (isTimerActive && timeRemaining > 0) {
      timer = setTimeout(() => {
        setTimeRemaining(prev => prev - 1);
      }, 1000);
    } else if (isTimerActive && timeRemaining === 0) {
      setIsTimerActive(false);
      setCurrentState(states.HALF_OPEN);
      setTestRequestsRemaining(maxTestRequests);
      addLog(`üîÑ Circuit Breaker –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –ü–û–õ–£–û–¢–ö–†–´–¢–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ ${maxTestRequests} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`);
    }
    
    return () => clearTimeout(timer);
  }, [isTimerActive, timeRemaining, states.HALF_OPEN, maxTestRequests]);

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const getStateColor = () => {
    switch(currentState) {
      case states.CLOSED: return 'bg-green-500';
      case states.OPEN: return 'bg-red-500';
      case states.HALF_OPEN: return 'bg-yellow-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto bg-white rounded-lg shadow-md">
      <h1 className="text-2xl font-bold mb-6 text-center">–°–∏–º—É–ª—è—Ü–∏—è Circuit Breaker</h1>
      
      {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-4">
          <div className={`p-4 rounded-lg shadow w-1/3 mx-2 text-center ${currentState === states.CLOSED ? 'ring-4 ring-green-500 bg-green-100' : 'bg-gray-100'}`}>
            <h3 className="font-semibold">–ó–∞–∫—Ä—ã—Ç—ã–π</h3>
            <p className="text-sm mt-1">–ó–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é</p>
          </div>
          <div className={`p-4 rounded-lg shadow w-1/3 mx-2 text-center ${currentState === states.OPEN ? 'ring-4 ring-red-500 bg-red-100' : 'bg-gray-100'}`}>
            <h3 className="font-semibold">–û—Ç–∫—Ä—ã—Ç—ã–π</h3>
            <p className="text-sm mt-1">–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è</p>
            {currentState === states.OPEN && timeRemaining > 0 && (
              <p className="font-bold mt-1">{timeRemaining}—Å</p>
            )}
          </div>
          <div className={`p-4 rounded-lg shadow w-1/3 mx-2 text-center ${currentState === states.HALF_OPEN ? 'ring-4 ring-yellow-500 bg-yellow-100' : 'bg-gray-100'}`}>
            <h3 className="font-semibold">–ü–æ–ª—É–æ—Ç–∫—Ä—ã—Ç—ã–π</h3>
            <p className="text-sm mt-1">–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {testRequestsRemaining}/{maxTestRequests}</p>
          </div>
        </div>
        
        <div className="bg-gray-200 h-2 rounded-full mb-2">
          <div className={`h-2 rounded-full ${getStateColor()}`} style={{ width: `${(failureCount / failureThreshold) * 100}%` }}></div>
        </div>
        <p className="text-sm text-gray-600 text-center">–û—à–∏–±–∫–∏: {failureCount}/{failureThreshold}</p>
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex justify-center space-x-4 mb-6">
        <button 
          onClick={simulateSuccess} 
          className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition"
        >
          –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        </button>
        <button 
          onClick={simulateFailure} 
          className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition"
        >
          –ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        </button>
        <button 
          onClick={resetSimulation}
          className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition"
        >
          –°–±—Ä–æ—Å–∏—Ç—å
        </button>
      </div>
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="p-4 bg-gray-100 rounded-lg">
          <h3 className="font-semibold mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
          <p>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: <span className="font-medium">{currentState}</span></p>
          <p>–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <span className="font-medium">{successCount}</span></p>
          <p>–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <span className="font-medium">{failureCount}</span></p>
        </div>
        
        {/* –õ–æ–≥–∏ */}
        <div className="p-4 bg-gray-100 rounded-lg">
          <h3 className="font-semibold mb-2">–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π:</h3>
          <div className="h-40 overflow-y-auto text-sm space-y-1">
            {logs.map((log, index) => (
              <p key={index}>{log}</p>
            ))}
          </div>
        </div>
      </div>
      
      {/* –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π */}
      <div className="mt-6 bg-blue-50 p-4 rounded-lg text-sm">
        <h3 className="font-semibold mb-2">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Circuit Breaker:</h3>
        <p><strong>–ó–∞–∫—Ä—ã—Ç—ã–π:</strong> –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞. –ó–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –∫ —Å–µ—Ä–≤–∏—Å—É. –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {failureThreshold} –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –û—Ç–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.</p>
        <p><strong>–û—Ç–∫—Ä—ã—Ç—ã–π:</strong> –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è. –ü–æ—Å–ª–µ {resetTimeoutSeconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –ü–æ–ª—É–æ—Ç–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.</p>
        <p><strong>–ü–æ–ª—É–æ—Ç–∫—Ä—ã—Ç—ã–π:</strong> –†–∞–∑—Ä–µ—à–µ–Ω–æ {maxTestRequests} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω—ã ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –ó–∞–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –û—Ç–∫—Ä—ã—Ç–æ–µ.</p>
      </div>
    </div>
  );
};

export default CircuitBreakerVisualizer;